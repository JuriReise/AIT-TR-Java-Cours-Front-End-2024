// –ª–æ–∞–¥–µ—Ä
function manageLoader(show) {
    const loader = document.querySelector('.loader');
    loader.style.display = show ? 'inline-block' : 'none';
}

// –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
async function fetchGeoData() {
    const geoUrl = 'https://get.geojs.io/v1/ip/geo.json';
    const geoDataElement = document.getElementById('geo-data');

    manageLoader(true); 

    try {
        
        const geoResponse = await axios.get(geoUrl);
        const { latitude, longitude, city } = geoResponse.data;

        
        geoDataElement.innerHTML = `
            <p>–®–∏—Ä–æ—Ç–∞: ${latitude}</p>
            <p>–î–æ–ª–≥–æ—Ç–∞: ${longitude}</p>
            <p>–ì–æ—Ä–æ–¥: ${city}</p>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
        await new Promise(resolve => setTimeout(resolve, 5000));

        
        await fetchWeatherData(latitude, longitude, city);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö:', error.message);
        geoDataElement.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.';
    } finally {
        manageLoader(false); 

    } 
}

// –ø–æ–≥–æ–¥–∞
async function fetchWeatherData(latitude, longitude, city) {
    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true&precipitation_probability=true`;
    const weatherDataElement = document.getElementById('weather-data');

    manageLoader(true);

    try {
        
        const weatherResponse = await axios.get(weatherUrl);
        const { temperature, windspeed, weathercode } = weatherResponse.data.current_weather;
        const precipitationProbability = weatherResponse.data.precipitation_probability || "–î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç";

        
        const weatherDescription = decodeWeatherCode(weathercode);

        
        weatherDataElement.innerHTML = `
            <h2>–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ ${city}</h2>
            <p>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C</p>
            <p>–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${windspeed} –º/—Å</p>
            <p>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: ${precipitationProbability}%</p>
            <p>–ü–æ–≥–æ–¥–∞: ${weatherDescription}</p>
        `;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error.message);
        weatherDataElement.textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.';

    } finally {
        manageLoader(false);

    }
}

// –≤–∏–¥—ã –ø–æ–≥–æ–¥—ã
function decodeWeatherCode(code) {
    const weatherCodes = {
        0: '–Ø—Å–Ω–æ‚òÄÔ∏è',
        1: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ‚õÖ',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å‚õÖ',
        3: '–ü–∞—Å–º—É—Ä–Ω–æüôÅ',
        45: '–¢—É–º–∞–ΩüåÅ',
        48: '–û—Å–∞–∂–¥–∞—é—â–∏–π —Ç—É–º–∞–Ωüå´Ô∏è:',
        51: '–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å',
        53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å',
        61: '–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å',
        63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å',
        65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å',
        71: '–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥',
        73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥',
        75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥‚ùÑÔ∏è',
        80: '–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å',
        81: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å',
        82: '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—åüå®Ô∏è',
    };

    return weatherCodes[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞';
}


fetchGeoData();
fetchWeatherData();
