// Pixabay API –∫–ª—é—á
const PIXABAY_API_KEY = '47725528-48b62ab698c0d7142d9367fa8';

// Pexels API –∫–ª—é—á
const PEXELS_API_KEY = 'EYIALjcjssVIlaWcErEDVlszKju7PI7GN8xalyGnzUN9pPLOwWbTDVmZ';

// –ª–æ–∞–¥–µ—Ä
function manageLoader(show) {
    const loader = document.getElementById('loader');
    loader.style.display = show ? 'inline-block' : 'none';
}

// –æ–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
async function fetchData(url) {
    try {
        const response = await axios.get(url);
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        throw error;
    }
}

// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã
function decodeWeatherCode(code) {
    const weatherCodes = {
        0: '–Ø—Å–Ω–æ ‚òÄÔ∏è',
        1: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ üå§Ô∏è',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå•Ô∏è',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        45: '–¢—É–º–∞–Ω üå´Ô∏è',
        48: '–û—Å–∞–∂–¥–∞—é—â–∏–π —Ç—É–º–∞–Ω üåÅ',
        51: '–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å üå¶Ô∏è',
        53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è',
        61: '–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å üåßÔ∏è',
        63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üå¶Ô∏è',
        65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è',
        71: '–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥ üå®Ô∏è',
        73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ üå®Ô∏è',
        75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è',
        80: '–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å üå¶Ô∏è',
        81: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å üåßÔ∏è',
        82: '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üå©Ô∏è',
    };

    return weatherCodes[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞ üåç';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Pixabay API
async function fetchCityPhotoPixabay(city) {
    try {
        const response = await fetch(`https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(city)}&image_type=photo`);
        const data = await response.json();
        return data.hits[0]?.largeImageURL || null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Pixabay:', error.message);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Pexels API
async function fetchCityPhotoPexels(city) {
    try {
        const response = await fetch(`https://api.pexels.com/v1/search?query=${encodeURIComponent(city)}&per_page=1`, {
            headers: {
                Authorization: PEXELS_API_KEY
            }
        });
        const data = await response.json();
        return data.photos[0]?.src.large || null;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Pexels:', error.message);
        return null;
    }
}


async function fetchCityPhoto(city) {
    try {
        let photoUrl = await fetchCityPhotoPixabay(city);
        if (!photoUrl) {
            console.log('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Pixabay, –ø—Ä–æ–±—É–µ–º Pexels...');
            photoUrl = await fetchCityPhotoPexels(city);
        }
        return photoUrl || 'placeholder-city.jpg';
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞:', error.message);
        return 'placeholder-city.jpg';
    }
}


async function fetchGeoData() {
    const geoJsUrl = 'https://get.geojs.io/v1/ip/geo.json';
    const ipInfoUrl = 'https://ipinfo.io/json?token=468b0de863ad1e'; 
    manageLoader(true);

    try {
        console.log('–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ geo.js...');
        const geoData = await fetchData(geoJsUrl);
        console.log('–ì–µ–æ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ geo.js:', geoData);

        document.getElementById('geo-data').textContent = `${geoData.city}, ${geoData.country}`;
        const cityPhoto = await fetchCityPhoto(geoData.city);
        document.getElementById('city-photo').src = cityPhoto;

        const latitude = geoData.latitude;
        const longitude = geoData.longitude;
        await fetchWeatherData(latitude, longitude);
    } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ geo.js. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ ipinfo.io...');
        try {
            const geoData = await fetchData(ipInfoUrl);
            console.log('–ì–µ–æ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ ipinfo.io:', geoData);

            document.getElementById('geo-data').textContent = `${geoData.city}, ${geoData.country}`;
            const cityPhoto = await fetchCityPhoto(geoData.city);
            document.getElementById('city-photo').src = cityPhoto;

            const [latitude, longitude] = geoData.loc.split(',');
            await fetchWeatherData(latitude, longitude);
        } catch (finalError) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ipinfo.io:', finalError.message);
            document.getElementById('geo-data').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.';
        }
    } finally {
        manageLoader(false);
    }
}


async function fetchWeatherData(latitude = 35.6895, longitude = 139.6917) {
    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${latitude}&longitude=${longitude}&current_weather=true`;
    try {
        const weatherData = await fetchData(weatherUrl);
        const weatherCode = weatherData.current_weather.weathercode;
        const temperature = weatherData.current_weather.temperature;
        const windSpeed = weatherData.current_weather.windspeed;

        const weatherText = `
            –ü–æ–≥–æ–¥–∞: ${decodeWeatherCode(weatherCode)}<br>
            –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C<br>
            –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${windSpeed} –º/—Å
        `;
        document.getElementById('weather-data').innerHTML = weatherText;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error.message);
        document.getElementById('weather-data').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.';
    }
}


function updateSeasonBackground() {
    const month = new Date().getMonth();
    const seasonPhoto = document.getElementById('season-photo');
    const seasons = ['winter.jpeg', 'spring.jpeg', 'summer.jpeg', 'autumn.jpeg'];
    const seasonIndex = [11, 0, 1].includes(month) ? 0 : [2, 3, 4].includes(month) ? 1 : [5, 6, 7].includes(month) ? 2 : 3;
    seasonPhoto.src = `../IMG/${seasons[seasonIndex]}`;
}


document.addEventListener('DOMContentLoaded', () => {
    fetchGeoData();
    updateSeasonBackground();
});
