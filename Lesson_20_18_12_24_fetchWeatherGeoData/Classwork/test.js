// Pixabay API –∫–ª—é—á
const PIXABAY_API_KEY = '47725528-48b62ab698c0d7142d9367fa8';

// Pexels API –∫–ª—é—á
const PEXELS_API_KEY = 'EYIALjcjssVIlaWcErEDVlszKju7PI7GN8xalyGnzUN9pPLOwWbTDVmZ';

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∞–¥–µ—Ä–æ–º
function manageLoader(show) {
    const loader = document.getElementById('loader');
    loader.style.display = show ? 'inline-block' : 'none';
}

// –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
async function fetchData(url) {
    try {
        const response = await axios.get(url);
        return response.data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        throw error;
    }
}

// –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–≥–æ–¥—ã
function decodeWeatherCode(code) {
    const weatherCodes = {
        0: '–Ø—Å–Ω–æ ‚òÄÔ∏è',
        1: '–í –æ—Å–Ω–æ–≤–Ω–æ–º —è—Å–Ω–æ üå§Ô∏è',
        2: '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å üå•Ô∏è',
        3: '–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è',
        45: '–¢—É–º–∞–Ω üå´Ô∏è',
        48: '–û—Å–∞–∂–¥–∞—é—â–∏–π —Ç—É–º–∞–Ω üåÅ',
        51: '–õ—ë–≥–∫–∞—è –º–æ—Ä–æ—Å—å üå¶Ô∏è',
        53: '–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è',
        55: '–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåßÔ∏è',
        61: '–õ—ë–≥–∫–∏–π –¥–æ–∂–¥—å üåßÔ∏è',
        63: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üå¶Ô∏è',
        65: '–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåßÔ∏è',
        71: '–õ—ë–≥–∫–∏–π —Å–Ω–µ–≥ üå®Ô∏è',
        73: '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ üå®Ô∏è',
        75: '–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è',
        80: '–õ—ë–≥–∫–∏–π –ª–∏–≤–µ–Ω—å üå¶Ô∏è',
        81: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –ª–∏–≤–µ–Ω—å üåßÔ∏è',
        82: '–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üå©Ô∏è',
    };

    return weatherCodes[code] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞ üåç';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Pixabay API
async function fetchCityPhotoPixabay(city) {
    try {
        const response = await fetch(https://pixabay.com/api/?key=${PIXABAY_API_KEY}&q=${encodeURIComponent(city)}&image_type=photo);
        const data = await response.json();
        return data.hits[0]?.largeImageURL || null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Pixabay:', error.message);
        return null; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ Pexels API
async function fetchCityPhotoPexels(city) {
    try {
        const response = await fetch(https://api.pexels.com/v1/search?query=${encodeURIComponent(city)}&per_page=1, {
            headers: {
                Authorization: PEXELS_API_KEY
            }
        });
        const data = await response.json();
        return data.photos[0]?.src.large || null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ Pexels:', error.message);
        return null; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞
async function fetchCityPhoto(city) {
    try {
        let photoUrl = await fetchCityPhotoPixabay(city); // –°–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ Pixabay
        if (!photoUrl) {
            console.log('–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Pixabay, –ø—Ä–æ–±—É–µ–º Pexels...');
            photoUrl = await fetchCityPhotoPexels(city); // –ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ Pexels
        }
        return photoUrl || 'placeholder-city.jpg'; // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–æ—Ä–æ–¥–∞:', error.message);
        return 'placeholder-city.jpg'; // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    }
}

// –§–æ–Ω –ø–æ —Å–µ–∑–æ–Ω–∞–º
function updateSeasonBackground() {
    const month = new Date().getMonth();
    const seasonPhoto = document.getElementById('season-photo');
    let seasonImage = '';

    if ([11, 0, 1].includes(month)) {
        seasonImage = 'winter.jpeg';
    } else if ([2, 3, 4].includes(month)) {
        seasonImage = 'spring.jpeg';
    } else if ([5, 6, 7].includes(month)) {
        seasonImage = 'summer.jpeg';
    } else if ([8, 9, 10].includes(month)) {
        seasonImage = 'autumn.jpeg';
    }

    seasonPhoto.src = ../IMG/${seasonImage};
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö
async function fetchGeoData() {
    const geoUrl = 'https://cors-anywhere.herokuapp.com/https://get.geojs.io/v1/ip/geo.json';
    manageLoader(true);
    try {
        const geoData = await fetchData(geoUrl);
        document.getElementById('geo-data').textContent = ${geoData.city}, ${geoData.country};
        const cityPhoto = await fetchCityPhoto(geoData.city);
        document.getElementById('city-photo').src = cityPhoto;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–¥–∞–Ω–Ω—ã—Ö:', error.message);
    } finally {
        manageLoader(false);
    }
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
async function fetchWeatherData() {
    const weatherUrl = 'https://api.open-meteo.com/v1/forecast?latitude=35.6895&longitude=139.6917&current_weather=true';
    manageLoader(true);
    try {
        const weatherData = await fetchData(weatherUrl);
        const weatherCode = weatherData.current_weather.weathercode;
        const temperature = weatherData.current_weather.temperature;
        const windSpeed = weatherData.current_weather.windspeed;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ DOM
        const weatherText = 
            –ü–æ–≥–æ–¥–∞: ${decodeWeatherCode(weatherCode)}<br>
            –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature}¬∞C<br>
            –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${windSpeed} –º/—Å
        ;
        document.getElementById('weather-data').innerHTML = weatherText;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ:', error.message);
        document.getElementById('weather-data').textContent = '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ.';
    } finally {
        manageLoader(false);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', () => {
    fetchGeoData();
    fetchWeatherData();
    updateSeasonBackground();
});

// –¢–µ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
async function testCityPhotos() {
    const testCities = ['Paris', 'Tokyo', 'New York', 'Sydney', 'Moscow'];
    console.log('--- –¢–µ—Å—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–æ—Ä–æ–¥–æ–≤ ---');
    for (const city of testCities) {
        const photoUrl = await fetchCityPhoto(city);
        console.log(–ì–æ—Ä–æ–¥: ${city}, –§–æ—Ç–æ URL: ${photoUrl});
    }
}

// –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
function testGeoLocation() {
    const mockGeoData = [
        { city: 'London', country: 'United Kingdom' },
        { city: 'Berlin', country: 'Germany' },
        { city: 'Madrid', country: 'Spain' }
    ];

    console.log('--- –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è ---');
    for (const geo of mockGeoData) {
        document.getElementById('geo-data').textContent = ${geo.city}, ${geo.country};
        console.log(–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${geo.city}, ${geo.country});
    }
}

// –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ
async function testWeatherData() {
    const testCoordinates = [
        { latitude: 48.8566, longitude: 2.3522, city: 'Paris' },
        { latitude: 35.6895, longitude: 139.6917, city: 'Tokyo' },
        { latitude: 40.7128, longitude: -74.0060, city: 'New York' }
    ];

    console.log('--- –¢–µ—Å—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ ---');
    for (const coord of testCoordinates) {
        const weatherUrl = https://api.open-meteo.com/v1/forecast?latitude=${coord.latitude}&longitude=${coord.longitude}&current_weather=true;
        const weatherData = await fetchData(weatherUrl);
        console.log(–ü–æ–≥–æ–¥–∞ –¥–ª—è ${coord.city}:, weatherData.current_weather);
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
document.addEventListener('DOMContentLoaded', async () => {
    console.log('=== –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===');
    await testCityPhotos();
    testGeoLocation();
    await testWeatherData();
    console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===');
});